import sqlite3
import json
import logging
import emoji
from typing import List, Dict, Any
from elasticsearch import Elasticsearch, helpers
from openai import OpenAI
from config_openai import OPENAI_API_KEY
from config import ES_HOST, ES_PORT

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class ElasticsearchManager:
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–º –º–µ–º–æ–≤.

    –°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è:
      - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–≥–∞–º –∏ –æ–ø–∏—Å–∞–Ω–∏—é.
      - KNN-–ø–æ–∏—Å–∫–∞ –ø–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º 
      - –ü–µ—Ä–µ–≤–æ–¥–∞ —Å–º–∞–π–ª–∏–∫–æ–≤ –≤ —Ç–µ–∫—Å—Ç
    """

    def __init__(
        self,
        db_path: str = 'memes.db',
        index_name: str = 'memes_index',
        embedding_model: str = 'text-embedding-3-small',
        embedding_dim: int = 1536
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Elasticsearch –∏ –∫–ª–∏–µ–Ω—Ç OpenAI.

        Args:
            db_path (str): –ü—É—Ç—å –¥–æ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –º–µ–º–∞–º–∏ (—Ñ–∞–π–ª .db).
            index_name (str): –ò–º—è –∏–Ω–¥–µ–∫—Å–∞ –≤ Elasticsearch –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–º–æ–≤.
            embedding_model (str): –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ OpenAI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —Ç–µ–∫—Å—Ç–∞.
            embedding_dim (int): –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–æ–≤ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤ –∏–Ω–¥–µ–∫—Å–µ.

        Raises:
            ConnectionError: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Elasticsearch.
        """
        self.db_path = db_path
        self.index_name = index_name
        self.embedding_model = embedding_model
        self.embedding_dim = embedding_dim

        self.es = Elasticsearch(
            hosts=[f"http://{ES_HOST}:{ES_PORT}"],
            request_timeout=30,
            max_retries=3,
            retry_on_timeout=True
        )
        if not self.es.ping():
            raise ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Elasticsearch")
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Elasticsearch —É—Å–ø–µ—à–Ω–æ")

        # –ö–ª–∏–µ–Ω—Ç OpenAI –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        self.client = OpenAI(api_key=OPENAI_API_KEY)

    def search_with_hybrid(self, query: str, k: int = 20, alpha: float = 0.2) -> List[Dict[str, Any]]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫: —Å–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π, –∞ –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ‚Äî KNN-–ø–æ–∏—Å–∫.

        –õ–æ–≥–∏–∫–∞:
          1. –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º (2*k).
          2. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ >= k —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–µ k.
          3. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ < k ‚Äî –¥–æ–ø–æ–ª–Ω—è–µ—Ç –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ KNN-–ø–æ–∏—Å–∫–∞, –∏—Å–∫–ª—é—á–∞—è –¥—É–±–ª–∏.
          4. –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å—Ç—ã–π KNN-–ø–æ–∏—Å–∫.

        Args:
            query (str): –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å (—Ç–µ–∫—Å—Ç –∏–ª–∏ emoji).
            k (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
            alpha (float): –í–µ—Å KNN-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ —Å–º–µ—à–∏–≤–∞–Ω–∏–∏ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–µ).

        Returns:
            List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–ª—è–º–∏:
                - id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑ SQLite.
                - score: –æ—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏.
                - name, image, description, tags: –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–µ–º–∞.
        """
        text_results = self._search_text_fields(query, k * 2)
        if text_results:
            if len(text_results) >= k:
                return text_results[:k]

            knn_results = self._search_knn(query, k)
            text_ids = {str(doc['id']) for doc in text_results}
            filtered = [doc for doc in knn_results if str(doc['id']) not in text_ids]
            return text_results + filtered[: k - len(text_results)]
        else:
            return self._search_knn(query, k)

    def _is_emoji_only(self, s: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∏–∑ emoji.

        Args:
            s (str): –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.

        Returns:
            bool: True, –µ—Å–ª–∏ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã —Å—Ç—Ä–æ–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Å–ª–æ–≤–∞—Ä–µ emoji.EMOJI_DATA –∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞.
        """
        return bool(s.strip()) and all(ch in emoji.EMOJI_DATA for ch in s.strip())

    def _translate_emoji_to_text(self, s: str) -> str:
        """
        –ü–µ—Ä–µ–≤–æ–¥–∏—Ç emoji-—Å—Ç—Ä–æ–∫—É –≤ —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ñ–æ—Ä–º—É –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞.

        –ü—Ä–∏–º–µ—Ä: "üòäüéâ" -> "smiling face party popper"

        Args:
            s (str): –°—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ç–æ–ª—å–∫–æ emoji.

        Returns:
            str: –î–µ–º–æ–¥–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–π –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–π.
        """
        return emoji.demojize(s).replace(':', '').replace('_', ' ')

    def initialize_elasticsearch(self) -> None:
        """
        –°–æ–∑–¥–∞—ë—Ç –∏–Ω–¥–µ–∫—Å –≤ Elasticsearch, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.

        Mappings:
          - db_id: integer
          - name, description, tags: text
          - image: keyword
          - image_embedding: dense_vector –¥–ª—è KNN-–ø–æ–∏—Å–∫–∞

        Returns:
            None
        """
        if not self.es.indices.exists(index=self.index_name):
            mapping = {
                "mappings": {
                    "properties": {
                        "db_id": {"type": "integer"},
                        "name": {"type": "text"},
                        "description": {"type": "text"},
                        "tags": {"type": "text"},
                        "image": {"type": "keyword"},
                        "image_embedding": {
                            "type": "dense_vector",
                            "dims": self.embedding_dim,
                            "index": True,
                            "similarity": "cosine"
                        }
                    }
                }
            }
            self.es.indices.create(index=self.index_name, body=mapping)

    def _search_text_fields(self, query: str, k: int) -> List[Dict[str, Any]]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª—è–º tags, description –∏ name.

        Args:
            query (str): –°—Ç—Ä–æ–∫–∞ –∑–∞–ø—Ä–æ—Å–∞.
            k (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

        Returns:
            List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –æ—Ü–µ–Ω–∫–æ–π –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏.

        –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
            –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ –ª–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.
        """
        try:
            resp = self.es.search(
                index=self.index_name,
                body={
                    "size": k,
                    "query": {
                        "multi_match": {
                            "query": query,
                            "fields": ["tags", "description", "name"],
                            "fuzziness": 1 if len(query) > 3 else 0
                        }
                    }
                }
            )
            return [
                {"id": h['_source'].get('db_id') or h['_source'].get('id'),
                 "score": h['_score'],
                 **{f: h['_source'].get(f) for f in ['name', 'image', 'description', 'tags']}
                }
                for h in resp['hits']['hits']
            ]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
            return []

    def _search_knn(self, query: str, k: int) -> List[Dict[str, Any]]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç KNN-–ø–æ–∏—Å–∫ –ø–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º.

        –õ–æ–≥–∏–∫–∞:
          1. –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ emoji ‚Äî –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Ç–µ–∫—Å—Ç.
          2. –°–æ–∑–¥–∞–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥ —Å –ø–æ–º–æ—â—å—é OpenAI.
          3. –ó–∞–ø—É—Å–∫–∞–µ—Ç KNN-–∑–∞–ø—Ä–æ—Å –≤ Elasticsearch –ø–æ –ø–æ–ª—é image_embedding.

        Args:
            query (str): –ó–∞–ø—Ä–æ—Å (—Ç–µ–∫—Å—Ç –∏–ª–∏ emoji).
            k (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.

        Returns:
            List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –æ—Ü–µ–Ω–∫–æ–π –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏.
        """
        if self._is_emoji_only(query):
            query = self._translate_emoji_to_text(query)
            logger.info(f"Translate emoji for embedding: '{query}'")
        emb = self.client.embeddings.create(model=self.embedding_model, input=query).data[0].embedding
        print('–î–ª–∏–Ω–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è KNN:', len(emb))
        try:
            resp = self.es.search(
                index=self.index_name,
                body={
                    "size": k,
                    "query": {
                        "knn": {
                            "field": "image_embedding",
                            "query_vector": emb,
                            "num_candidates": 100
                        }
                    }
                }
            )
            return [
                {"id": h['_source'].get('db_id') or h['_source'].get('id'),
                 "score": h['_score'],
                 **{f: h['_source'].get(f) for f in ['name', 'image', 'description', 'tags']}
                }
                for h in resp['hits']['hits']
            ]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ KNN-–ø–æ–∏—Å–∫–∞: {e}")
            return []

    def search(self, query: str, k: int = 5) -> List[Dict[str, Any]]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞: —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∏–ª–∏ KNN –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞.

        –õ–æ–≥–∏–∫–∞:
          - –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ emoji ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç KNN-–ø–æ–∏—Å–∫.
          - –ò–Ω–∞—á–µ: —Å–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫, –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ‚Äî KNN.

        Args:
            query (str): –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            k (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

        Returns:
            List[Dict[str, Any]]: –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –º–µ–º—ã.
        """
        if self._is_emoji_only(query):
            translated = self._translate_emoji_to_text(query)
            logger.info(f"Emoji-–∑–∞–ø—Ä–æ—Å: '{query}' -> '{translated}'")
            return self._search_knn(translated, k)

        text_results = self._search_text_fields(query, k)
        if text_results:
            return text_results
        return self._search_knn(query, k)

    def sync_db_to_elasticsearch(self) -> None:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π SQLite –ë–î –≤ –∏–Ω–¥–µ–∫—Å Elasticsearch.

        –ß—Ç–µ–Ω–∏–µ:
          - –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –±–∞–∑–µ memes.db.
          - –í—ã–±–∏—Ä–∞–µ—Ç –∑–∞–ø–∏—Å–∏ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º JSON-—ç–º–±–µ–¥–¥–∏–Ω–≥–æ–º.
          - –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏.

        –ó–∞–≥—Ä—É–∑–∫–∞:
          - –§–æ—Ä–º–∏—Ä—É–µ—Ç bulk-–æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è Elasticsearch.
          - –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ helpers.bulk.

        Returns:
            None
        """
        actions = []
        print('–û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É:', self.db_path)
        with sqlite3.connect(self.db_path) as conn:
            conn.row_factory = sqlite3.Row
            count = 0
            for row in conn.execute(
                "SELECT id, name, description, tags, image, embedding FROM memes WHERE embedding IS NOT NULL"
            ):
                try:
                    emb = json.loads(row['embedding'])
                except Exception as e:
                    print('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ embedding:', e)
                    continue
                doc = {
                    "db_id": row['id'],
                    "name": row['name'],
                    "description": row['description'],
                    "tags": row['tags'],
                    "image": row['image'],
                    "image_embedding": emb
                }
                actions.append({"_index": self.index_name, "_id": row['id'], "_source": doc})
                count += 1
            print('–í—Å–µ–≥–æ –º–µ–º–æ–≤ –¥–ª—è –∑–∞–ª–∏–≤–∫–∏:', count)
        if actions:
            print('–ù–∞—á–∏–Ω–∞–µ–º bulk...')
            helpers.bulk(self.es, actions)
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(actions)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        else:
            print('–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏!')
