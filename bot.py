import logging
import sqlite3
import random
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

API_TOKEN = '8104370372:AAECNfDYdmJX5UWdp5cqD179d5ZEDANJAgc'
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

conn = sqlite3.connect('memes.db')
cursor = conn.cursor()

cursor.execute('CREATE INDEX IF NOT EXISTS idx_tags ON memes(tags)')
cursor.execute('CREATE INDEX IF NOT EXISTS idx_name ON memes(name)')
conn.commit()

class MemeStates(StatesGroup):
    waiting_for_topic = State()
    waiting_for_count = State()
    waiting_for_action = State()

def get_meme_word_form(number):
    last_digit = number % 10
    last_two_digits = number % 100
    
    if last_digit == 1 and last_two_digits != 11:
        return "–º–µ–º"
    elif 2 <= last_digit <= 4 and not (12 <= last_two_digits <= 14):
        return "–º–µ–º–∞"
    else:
        return "–º–µ–º–æ–≤"

def get_found_start_word(number):
    if number % 10 == 1 and number % 100 != 11:
        return "–ù–∞–π–¥–µ–Ω"
    else:
        return "–ù–∞–π–¥–µ–Ω–æ"

async def send_meme_with_description(chat_id, meme_data):
    meme_id, image, name, description = meme_data
    
    try:
        await bot.send_photo(
            chat_id=chat_id,
            photo=image,
            caption=name[:1000]
        )
        
        if description:
            await bot.send_message(
                chat_id=chat_id,
                text=f"–û–ø–∏—Å–∞–Ω–∏–µ: {description[:1000]}",
                parse_mode='HTML'
            )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–∞ {meme_id}: {e}")
        return False

@dp.message_handler(commands=['start'], state='*')
async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish()
    welcome_text = """
ü§ñ <b>–ú–µ–º-–ü–æ–∏—Å–∫–æ–≤–∏–∫</b> üé≠

–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –∏ —Å–º–µ—à–Ω—ã–µ –º–µ–º—ã –Ω–∞ –ª—é–±—É—é —Ç–µ–º—É!

üîç <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
1. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ 
2. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–º–æ–≤
3. –ü–æ–ª—É—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!

üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
/help - –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É
"""

    await message.answer(welcome_text, parse_mode='HTML')
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await MemeStates.waiting_for_topic.set()

@dp.message_handler(commands=['help'], state='*')
async def cmd_help(message: types.Message):
    help_text = """
üÜò <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>

üîç <b>–ü–æ–∏—Å–∫ –º–µ–º–æ–≤:</b>
1. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É
2. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
3. –ü–æ–ª—É—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!

üîÑ –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–º–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –µ—â—ë –ø–æ —Ç–æ–π –∂–µ —Ç–µ–º–µ
‚Ä¢ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
‚Ä¢ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É

–ï—Å–ª–∏ –º–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞.

–ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫!
"""
    await message.answer(help_text, parse_mode='HTML')
    await ask_for_action_after_help(message)

async def ask_for_action_after_help(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫")
    keyboard.row("‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await MemeStates.waiting_for_action.set()

@dp.message_handler(state=MemeStates.waiting_for_topic)
async def process_topic(message: types.Message, state: FSMContext):
    topic = message.text.strip()
    if not topic:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞")
        return
    
    await state.update_data(topic=topic)
    await MemeStates.next()
    await message.answer(f"<b>–¢–µ–º–∞:</b> {topic}\n–°–∫–æ–ª—å–∫–æ –º–µ–º–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å?", parse_mode='HTML')

@dp.message_handler(state=MemeStates.waiting_for_count)
async def process_count(message: types.Message, state: FSMContext):
    try:
        requested_count = int(message.text)
        if requested_count <= 0:
            await message.answer("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
            return
        if requested_count > 20:
            requested_count = 20
            await message.answer("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - 20 –º–µ–º–æ–≤")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    
    user_data = await state.get_data()
    topic = user_data['topic']
    
    cursor.execute('''
    SELECT id, image, name, description FROM memes 
    WHERE tags LIKE '%' || ? || '%' OR name LIKE '%' || ? || '%'
    ''', (topic, topic))
    all_matching_memes = cursor.fetchall()
    
    if not all_matching_memes:
        await message.answer("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É")
        await MemeStates.waiting_for_topic.set()
        return
    
    shown_memes = user_data.get('shown_memes', [])
    available_memes = [m for m in all_matching_memes if m[0] not in shown_memes]
    
    if not available_memes and shown_memes:
        await message.answer("–í—ã —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –º–µ–º—ã –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.")
        await ask_for_action(message)
        return
    
    if not shown_memes:
        available_memes = all_matching_memes
    
    actual_count = min(requested_count, len(available_memes))
    selected_memes = random.sample(available_memes, actual_count)
    
    shown_memes.extend([m[0] for m in selected_memes])
    await state.update_data(shown_memes=shown_memes)
    
    sent_count = 0
    for meme in selected_memes:
        success = await send_meme_with_description(message.chat.id, meme)
        if success:
            sent_count += 1
    
    word_form = get_meme_word_form(sent_count)
    start_word = get_found_start_word(sent_count)
    
    if sent_count < requested_count:
        if sent_count == 0:
            await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–µ–º–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É")
            await MemeStates.waiting_for_topic.set()
            return
        else:
            await message.answer(f"{start_word} {sent_count} {word_form} –∏–∑ {requested_count} –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö (–≤—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {len(all_matching_memes)}).")
    else:
        await message.answer(f"{start_word} {sent_count} {word_form}.")
    
    await state.update_data(
        last_topic=topic,
        last_count=sent_count,
        total_memes=len(all_matching_memes)
    )
    await ask_for_action(message)

async def ask_for_action(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("üîç –ï—â—ë –º–µ–º—ã")
    keyboard.row("üîÑ –ù–æ–≤–∞—è —Ç–µ–º–∞")
    keyboard.row("‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å")
    await message.answer("–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=keyboard)
    await MemeStates.waiting_for_action.set()

@dp.message_handler(state=MemeStates.waiting_for_action)
async def process_action(message: types.Message, state: FSMContext):
    if message.text == "üîç –ï—â—ë –º–µ–º—ã":
        user_data = await state.get_data()
        shown_count = len(user_data.get('shown_memes', []))
        total_memes = user_data.get('total_memes', 0)
        
        if shown_count >= total_memes:
            await message.answer("–í—ã —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –º–µ–º—ã –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.")
            await ask_for_action(message)
            return
        
        await message.answer(
            f"–°–∫–æ–ª—å–∫–æ –µ—â—ë –º–µ–º–æ–≤ –ø–æ —Ç–µ–º–µ '{user_data['last_topic']}'? (–¥–æ—Å—Ç—É–ø–Ω–æ: {total_memes - shown_count})", 
            reply_markup=types.ReplyKeyboardRemove()
        )
        await MemeStates.waiting_for_count.set()
    
    elif message.text == "üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫":
        await state.update_data(shown_memes=[])
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ–º–æ–≤:", 
                           reply_markup=types.ReplyKeyboardRemove())
        await MemeStates.waiting_for_topic.set()
    
    elif message.text == "üîÑ –ù–æ–≤–∞—è —Ç–µ–º–∞":
        await state.update_data(shown_memes=[])
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ–º–æ–≤:", 
                           reply_markup=types.ReplyKeyboardRemove())
        await MemeStates.waiting_for_topic.set()
    
    elif message.text == "‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å":
        await message.answer("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞.", 
                           reply_markup=types.ReplyKeyboardRemove())
        await state.finish()
    
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
